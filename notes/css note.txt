more detailed not or clear doubts through w3school site css-----------------

learn web kit also




<!-- font --> -
font-size
font-family
font-weight
text-align



/* <!-- colors --> */
rgb
rgba
hex : #
hsl


/* <!-- box model --> */
border
margin
padding



<!-- border details -->

border: 2px solid red border-width:3px 4px 54px 69px;
  {top,right,bottom,left}
border-width:3px 9px;
  {top , bottom-=3 and right ,left =9 }   
 

<!-- padding -->

padding;2px 10px;
   {top bottom =2px and right left = 10px}
padding :2px 3px 4px 5px;
  {top,right,bottom,left}

  <!-- backgtound -->
   backgtound-color
   backgtound-image:url();
   backgtound-repeat:no-repeat;
   backgtound-size:cover;
   backgtound-position:;
   background-attachment:fixed;{scrolling time just covering image effect geting}
   background:url() no-repeat center / cover fixed; 
   {not recommed the above style , repeat,postion,size,attachment is that structure}
mix-blend-mode:overlay;{hue,saturation,multiply,difference}
background-blend-mode:multiply,screen;


   <--gradiant :-->

   {linear and radial gradiant} properties
to top, to bottom ,to left ,to right are the adjustments of the gradiant
    background-image: linear-gradient(to top,rgba(255, 0, 0, 0.166), rgba(0, 0, 255, 0.188)),
    url("https://media.istockphoto.com/id/1444224749/photo/malabar-grey-hornbill-having-fruits-with-beautiful-background-at-coorg-karnataka-india.jpg?s=2048x2048&w=is&k=20&c=K3j0k3TVALjynGKpzekkAOfxjofEsullIhCpgTdWoWw=");
  
  
    background-image: radial-gradient(rgba(255, 255, 0, 0.21),rgba(0, 128, 0, 0.242)),
    url("https://media.istockphoto.com/id/1444224749/photo/malabar-grey-hornbill-having-fruits-with-beautiful-background-at-coorg-karnataka-india.jpg?s=2048x2048&w=is&k=20&c=K3j0k3TVALjynGKpzekkAOfxjofEsullIhCpgTdWoWw=");
  
  
  height: 100vh;
  background-position: bottom;
  background-size: cover;
  background-repeat: no-repeat;
  background-attachment: fixed;



  <----filter --->

   background-image:
    url("https://media.istockphoto.com/id/1444224749/photo/malabar-grey-hornbill-having-fruits-with-beautiful-background-at-coorg-karnataka-india.jpg?s=2048x2048&w=is&k=20&c=K3j0k3TVALjynGKpzekkAOfxjofEsullIhCpgTdWoWw=");

properties:-  
  
filter:blur(px)
filter:brightness(%)
      : contrast(%)
 filter: opacity(70%)
 {check gradiant style :webgradiant.com,gradiant.com}
check more in the w3school site


<--display-->
display:inline;
":inline-block;
":block;
"": none;

When to Use What?
‚úî Use inline when elements should stay in a line, like links <a> or <span>.
‚úî Use block when you need a full-width section (paragraphs, divs, headers).
‚úî Use inline-block when you need elements side by side but still want to control size (buttons,


<--shadow-->
values (x axis ,y axis, blurness, color)
box-shadow: 10px 10px 10px red;
or 
text-shadow:"";

<--position-->
position:relative
"":absolute;
"":fixed;
"":sticky;

<--flex-->
display:flex
flex-directio:column
justify-content:end,start,space-around
flex-wrap:wrap;
align-items:flex-start,""-end,center,space-...,
align-content:stretch; default
order :numbers eg1,2,3,4; {for aligh child divs }
align-self: center;{gve to child div for specify one child only, it override the align-items property}
flex-grow:number for child elements;
flex-shrink:number;
flex-flow: row wrap:writen together in shorthand



<--Grid--->
display:grid;
grid-template-columns:120px 120px 120px ..;(width)
{shorthand form:- grid-template-colums:repeat(3,100px)}
grid-template-rows:120px 120px 120px ...;(height)
{shorthand form:- grid-template-rows:repeat(3,100px)}
 grid-gap:20px;
 fr:friction units for dimentions of the scrreen size increase and decrease;

 grid-column-start: 1;
 grid-column-end: 4;
shorthand form{grid-column: 1 / 4;}
 grid-row-start: ;
 grid-row-end: ;
shorthand form {grid-column: 1 / 4;} 
 grid-template-columns:100px minmax(200px,1fr) 100px;
{adjust some element fixed size for some condition}

grid areas}=>
  grid-template-areas:
  "h h h h"
  "m m s s"
  "m m a a" /* Fixed */
  "f f f f";

  header{
    grid-area: h;
    
  }
  main{
    grid-area:m;
  }

  
section{
  grid-area: s;
}
  
  aside{
  grid-area: a;
  }

  footer{
    grid-area: f;
  }


  grid-area: row-start / column-start / row-end / column-end;
grid-area: 1 / 2 / 4 /6 ;


pseudo class:=> is().::after(),::before(),:not()



--variables creation---
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --font-size: 16px;
}

body {
  color: var(--primary-color);
  font-size: var(--font-size);
}



<---------Transformation-------->
 /* transform:translate(-400px,100px); */
  /* transform: translateY(200px); */
  /* transform: translateX(300px); */
  /* transform: scale(2,1); */
/* transform: rotate(20deg); */
 transform: skewX(20deg);


<----------------transition property---------->

.container > a{
 border: 1px solid red;
padding: 20px;
font-size: 23px;
text-decoration: none;
color: red;
transition: all;
transition-duration: 1s;
transition-timing-function: ease-out;
}

.container >a:hover{
background-color: brown;
color: white;
}


<--------------Media query------------>

üé≠ Common Media Query Breakpoints
Device Type	Screen Width
Small Phones	max-width: 480px
Tablets	max-width: 768px
Laptops	max-width: 1024px
Large Screens	max-width: 1200px


üîπ How Media Queries Work
A media query consists of:
@media rule ‚Äì Defines that a media query is being used.
Media type (screen, print, etc.) ‚Äì Specifies the type of device.
Media features (like max-width or orientation) ‚Äì Define conditions for applying styles

---------------
@media (min-width: 480px) and (max-width: 768px) {
  body {
    background-color: lightgreen;
  }
}
 Explanation:

The background changes to light green only if the screen width is between 480px and 768px.

-----------------------
Orientation-Based Media Queries
Use orientation: portrait or orientation: landscape to style elements based on device orientation.

3Ô∏è‚É£ Example: Changing Styles in Portrait Mode
css
Copy
Edit
@media (orientation: portrait) {
  body {
    background-color: pink;
  }
}
‚úÖ Use Case: Useful for mobile apps that behave differently in portrait vs. landscape mode.

---------------------------
Advanced Media Queries
5Ô∏è‚É£ Example: Dark Mode Support üåô
Detects if the user has enabled dark mode in their system settings.

css
Copy
Edit
@media (prefers-color-scheme: dark) {
  body {
    background-color: black;
    color: white;
  }
}
‚úÖ Use Case: Automatically switches to dark mode styling.
-------------------------
mparison Table
Media Query	Applies To	Use Case
@media (max-width: 600px)	All media types	Responsive design across screens and print
@media screen	Only screens (monitors, mobiles, tablets)	Excludes print styles
@media print	Printed pages	Printer-friendly layouts
@media only screen	Modern screens only	Avoids issues in old browsers

-------------
body{
  font-size: 4em;
  background-color: rgb(92, 172, 112);
  border: 2px dotted rgb(191, 31, 31);
}

@media (min-width: 600px) and (max-width: 900px) {
  body {
    background-color: yellow;
  }
}

<---------Animation ----------->

.container > div {
  width: 300px;
  height: 300px;
background-color: brown;
animation-name: animationSample;
animation-duration: 4s;
animation-iteration-count: infinite;


}

@keyframes animationSample{
  0% {
    transform: scale(1.2);
  }

  34% {
    background-color: cyan;
    transform: rotate(49deg);

  }

  60% {
    transform: skew(50deg);
    background-color: greenyellow;
  }


}



<----------------------------->
some things of the css

<div class="container">
    <div>Direct Child (Styled ‚úÖ)</div>
    <section>
        <div>Nested Child (Not Styled ‚ùå)</div>
    </section>
</div>
